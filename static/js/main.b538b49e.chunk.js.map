{"version":3,"sources":["assets/iov-logo.svg","address.ts","Header.tsx","Jumbo.tsx","MnemonicInput.tsx","App.tsx","AppLedger.tsx","Start.tsx","index.tsx"],"names":["module","exports","chainIdForAddress","network","makeAddress","mnemonic","a","wallet","Ed25519HdWallet","fromMnemonic","toString","chainId","createIdentity","HdPaths","iov","identity","bnsCodec","identityToAddress","Header","to","className","alt","src","iovLogo","height","React","Component","Jumbo","this","props","title","hidden","wordlist","EnglishMnemonic","MnemonicInput","typeahead","state","words","clear","_updateSelected","id","multiple","bsSize","ref","onChange","selected","setState","onWordsChanged","onInputChange","input","search","oldWords","newWords","trim","split","filter","Boolean","text","selectHintOnEnter","options","filterBy","option","normalized","toLowerCase","startsWith","emptyState","mnemonicVerificationErrorMessage","undefined","address","App","count","onClick","generateNewRandomMnemonic","copyMnemonic","clearMnemonic","length","variant","dismissible","role","type","data-dismiss","aria-label","aria-hidden","disabled","prompt","confirmed","join","copy","refs","MnemonicInput1","setWords","Bip39","Random","getBytes","randomWords","encode","getAddressFromLedger","transport","index","app","IovLedgerApp","getVersion","version","isIovLedgerAppVersion","Error","errorMessage","getAddress","response","isIovLedgerAppAddress","testMode","showAddressInLedger","connectionOpen","AppLedger","tryLedger","accountIndex","TransportWebUSB","create","result","close","console","warn","message","Start","ReactDOM","render","exact","path","component","document","getElementById"],"mappings":"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","file":"static/js/main.b538b49e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/iov-logo.ee12fc6d.svg\";","import { Address, ChainId } from \"@iov/bcp\";\nimport { bnsCodec } from \"@iov/bns\";\nimport { EnglishMnemonic } from \"@iov/crypto\";\nimport { Ed25519HdWallet, HdPaths } from \"@iov/keycontrol\";\n\nexport type Network = \"mainnet\" | \"testnet\";\n\nfunction chainIdForAddress(network: \"mainnet\" | \"testnet\"): ChainId {\n  if (network === \"mainnet\") return \"iov-mainnet\" as ChainId;\n  else return \"iov-lovenet\" as ChainId; // any testnet chain ID is fine. We just need it for the address prefix\n}\n\nexport async function makeAddress(mnemonic: EnglishMnemonic, network: Network): Promise<Address> {\n  const wallet = Ed25519HdWallet.fromMnemonic(mnemonic.toString());\n  const chainId = chainIdForAddress(network);\n  const identity = await wallet.createIdentity(chainId, HdPaths.iov(0));\n  return bnsCodec.identityToAddress(identity);\n}\n","import React from \"react\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\nimport { Link } from \"react-router-dom\";\n\nimport iovLogo from \"./assets/iov-logo.svg\";\n\nclass Header extends React.Component<{}, {}> {\n  public render(): JSX.Element {\n    return (\n      <Row>\n        <Col>\n          <Link to=\"/\">\n            <img className=\"mt-3 mb-3\" alt=\"IOV logo\" src={iovLogo} height={56} />\n          </Link>\n        </Col>\n      </Row>\n    );\n  }\n}\n\nexport default Header;\n","import React from \"react\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport Row from \"react-bootstrap/Row\";\n\ninterface JumboProps {\n  readonly title: string;\n  readonly network?: \"mainnet\" | \"testnet\";\n}\n\nclass Jumbo extends React.Component<JumboProps, {}> {\n  public render(): JSX.Element {\n    return (\n      <Row>\n        <Col>\n          <Jumbotron>\n            <Container>\n              <h2>\n                <span className=\"display-3 d-inline-block mr-2\">{this.props.title}</span>\n                <small className=\"badge badge-sm badge-primary align-top\" hidden={!this.props.network}>\n                  {this.props.network}\n                </small>\n              </h2>\n              <p className=\"mb-0\">\n                Here you can generate an IOV address\n                <span hidden={!this.props.network}> for {this.props.network}</span>.\n              </p>\n            </Container>\n          </Jumbotron>\n        </Col>\n      </Row>\n    );\n  }\n}\n\nexport default Jumbo;\n","import { EnglishMnemonic } from \"@iov/crypto\";\nimport React from \"react\";\nimport { Typeahead, TypeaheadModel } from \"react-bootstrap-typeahead\";\n\nconst wordlist = [...EnglishMnemonic.wordlist]; // create copy of correct type\n\ninterface MnemonicInputProps {\n  readonly id: string;\n  readonly onWordsChanged?: (words: readonly string[]) => void;\n}\n\ninterface MnemonicInputState {\n  readonly words: readonly string[];\n}\n\ninterface PrivateTypeahead<T extends TypeaheadModel> extends Typeahead<T> {\n  readonly clear: () => void;\n  readonly _updateSelected: (selected: T[]) => void;\n}\n\nclass MnemonicInput extends React.Component<MnemonicInputProps, MnemonicInputState> {\n  private typeahead: PrivateTypeahead<string> | null = null;\n\n  public constructor(props: MnemonicInputProps) {\n    super(props);\n    this.state = {\n      words: [],\n    };\n  }\n\n  public setWords(words: readonly string[]): void {\n    if (!this.typeahead) return;\n\n    this.typeahead.clear();\n    this.typeahead._updateSelected([...words]);\n  }\n\n  public render(): JSX.Element {\n    return (\n      <div>\n        <Typeahead\n          id={this.props.id}\n          multiple={true}\n          bsSize=\"lg\"\n          ref={ref => (this.typeahead = ref as PrivateTypeahead<string>)}\n          onChange={selected => {\n            this.setState({ words: selected });\n            this.props.onWordsChanged && this.props.onWordsChanged(selected);\n          }}\n          onInputChange={input => {\n            if (!this.typeahead) return;\n\n            // Process input if some whitespace included\n            if (input.search(/\\s+/) !== -1) {\n              const oldWords = this.state.words;\n              const newWords = input\n                .trim()\n                .split(/\\s+/)\n                .filter(Boolean);\n\n              this.typeahead.setState({ text: \"\" });\n              this.typeahead._updateSelected([...oldWords, ...newWords]);\n            }\n          }}\n          selectHintOnEnter={true}\n          options={wordlist}\n          filterBy={(option, props) => {\n            const normalized = props.text.trim().toLowerCase();\n            return option.startsWith(normalized);\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default MnemonicInput;\n","import { Bip39, EnglishMnemonic, Random } from \"@iov/crypto\";\nimport copy from \"clipboard-copy\";\nimport React from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\nimport Button from \"react-bootstrap/Button\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\n\nimport { makeAddress } from \"./address\";\nimport Header from \"./Header\";\nimport Jumbo from \"./Jumbo\";\nimport MnemonicInput from \"./MnemonicInput\";\n\ninterface AppProps {\n  readonly network: \"mainnet\" | \"testnet\";\n}\n\ninterface AppState {\n  readonly words: readonly string[];\n  readonly mnemonicVerificationErrorMessage: string | undefined;\n  readonly address: string | undefined;\n}\n\nfunction wordCountOk(count: number): boolean {\n  return count === 12 || count === 15 || count === 18 || count === 21 || count === 24;\n}\n\nconst emptyState: AppState = {\n  words: [],\n  mnemonicVerificationErrorMessage: undefined,\n  address: undefined,\n};\n\nclass App extends React.Component<AppProps, AppState> {\n  public constructor(props: AppProps) {\n    super(props);\n    this.state = {\n      ...emptyState,\n    };\n  }\n\n  public render(): JSX.Element {\n    return (\n      <Container className=\"mb-5\">\n        <Header />\n        <Jumbo title=\"Address Generator\" network={this.props.network} />\n        <Row>\n          <Col>\n            <h3>Enter your mnemonic:</h3>\n            <p>\n              We support English BIP39 mnemonics between 12 and 24 words. The mnemonic represents your private\n              key, which only you should know. If you lose it, you will not be able to access that account any\n              more.\n            </p>\n            <div>\n              <div className=\"d-flex justify-content-end\">\n                <button onClick={() => this.generateNewRandomMnemonic()} className=\"btn btn-link btn-sm\">\n                  Generate random\n                </button>\n                <button onClick={() => this.copyMnemonic()} className=\"btn btn-link btn-sm\">\n                  Copy\n                </button>\n                <button onClick={() => this.clearMnemonic()} className=\"btn btn-link btn-sm\">\n                  Clear\n                </button>\n              </div>\n              <MnemonicInput\n                ref=\"MnemonicInput1\"\n                id=\"input1\"\n                onWordsChanged={words => {\n                  this.setState({\n                    words: words,\n                    address: undefined,\n                    mnemonicVerificationErrorMessage: undefined,\n                  });\n                }}\n              />\n              <div className=\"d-flex justify-content-between mt-2\">\n                <p className=\"small\">{this.state.words.length} words entered.</p>\n              </div>\n\n              <Alert\n                variant=\"danger\"\n                dismissible={true}\n                role=\"alert\"\n                hidden={!this.state.mnemonicVerificationErrorMessage}\n              >\n                {this.state.mnemonicVerificationErrorMessage}\n                <button\n                  type=\"button\"\n                  className=\"close\"\n                  data-dismiss=\"alert\"\n                  aria-label=\"Close\"\n                  onClick={() => this.setState({ mnemonicVerificationErrorMessage: undefined })}\n                >\n                  <span aria-hidden=\"true\">&times;</span>\n                </button>\n              </Alert>\n            </div>\n            <p className=\"text-center\">\n              <Button\n                disabled={!wordCountOk(this.state.words.length)}\n                onClick={() => this.makeAddress()}\n                className=\"btn-lg\"\n              >\n                Show my {this.props.network} address\n              </Button>\n            </p>\n          </Col>\n        </Row>\n        <Row hidden={!this.state.address}>\n          <Col>\n            <Alert variant=\"success\">\n              <p className=\"mb-0\">\n                <strong>Your IOV address:</strong>\n                <br />\n                {this.state.address}\n              </p>\n            </Alert>\n            <Alert variant=\"warning\">\n              <p className=\"mb-0\">\n                This browser tab contains sensitive information in memory. Please close it now.\n              </p>\n            </Alert>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n\n  private async makeAddress(): Promise<void> {\n    const answer = prompt(\"Did you store the mnemonic in a secure location? If yes, please type 'yes'.\");\n    if ((answer || \"\").trim().toLowerCase() !== \"yes\") {\n      return;\n    }\n\n    try {\n      const confirmed = new EnglishMnemonic(this.state.words.join(\" \"));\n\n      this.setState({\n        address: await makeAddress(confirmed, this.props.network),\n      });\n    } catch (error) {\n      this.setState({\n        mnemonicVerificationErrorMessage: `${error.toString()}. Please check your mnemonic carefully.`,\n      });\n    }\n  }\n\n  private copyMnemonic(): void {\n    const mnemonic = this.state.words.join(\" \");\n    copy(mnemonic);\n  }\n\n  private async clearMnemonic(): Promise<void> {\n    (this.refs.MnemonicInput1 as MnemonicInput).setWords([]);\n  }\n\n  private async generateNewRandomMnemonic(): Promise<void> {\n    const randomWords = Bip39.encode(await Random.getBytes(16))\n      .toString()\n      .split(\" \");\n\n    (this.refs.MnemonicInput1 as MnemonicInput).setWords(randomWords);\n  }\n}\n\nexport default App;\n","import { Address } from \"@iov/bcp\";\nimport { IovLedgerApp, isIovLedgerAppAddress, isIovLedgerAppVersion } from \"@iov/ledger-bns\";\nimport TransportWebUSB from \"@ledgerhq/hw-transport-webusb\";\nimport React from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\nimport Button from \"react-bootstrap/Button\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\n\nimport Header from \"./Header\";\nimport Jumbo from \"./Jumbo\";\n\ninterface AddressResponse {\n  readonly address: Address;\n  readonly network: \"mainnet\" | \"testnet\";\n}\n\nasync function getAddressFromLedger(transport: TransportWebUSB, index: number): Promise<AddressResponse> {\n  const app = new IovLedgerApp(transport);\n  const version = await app.getVersion();\n  if (!isIovLedgerAppVersion(version)) throw new Error(version.errorMessage);\n  const response = await app.getAddress(index);\n  if (!isIovLedgerAppAddress(response)) throw new Error(response.errorMessage);\n\n  return {\n    address: response.address as Address,\n    network: version.testMode ? \"testnet\" : \"mainnet\",\n  };\n}\n\nasync function showAddressInLedger(transport: TransportWebUSB, index: number): Promise<void> {\n  const app = new IovLedgerApp(transport);\n  const version = await app.getVersion();\n  if (!isIovLedgerAppVersion(version)) throw new Error(version.errorMessage);\n  const response = await app.getAddress(index, true);\n  if (!isIovLedgerAppAddress(response)) throw new Error(response.errorMessage);\n}\n\ninterface AppLedgerProps {\n  readonly network: \"mainnet\" | \"testnet\";\n}\n\ninterface AppLedgerState {\n  readonly errorMessage: string | undefined;\n  readonly address: string | undefined;\n  readonly connectionOpen: boolean;\n}\n\nconst emptyState: AppLedgerState = {\n  errorMessage: undefined,\n  address: undefined,\n  connectionOpen: false,\n};\n\nclass AppLedger extends React.Component<AppLedgerProps, AppLedgerState> {\n  public constructor(props: AppLedgerProps) {\n    super(props);\n    this.state = {\n      ...emptyState,\n    };\n  }\n\n  public render(): JSX.Element {\n    return (\n      <Container className=\"mb-5\">\n        <Header />\n        <Jumbo title=\"IOV Ledger\" network={this.props.network} />\n        <Row>\n          <Col>\n            <h3>Use Ledger for address generation</h3>\n            <p>\n              Connect a Leder Nano S and continue. To be on the safe side, please confirm the address on the\n              Ledger screen matches the one in your browser. You can repeat this operation as often as you\n              like. Only one address will be generated.\n            </p>\n            <p className=\"text-center\">\n              <Button onClick={() => this.tryLedger()} disabled={this.state.connectionOpen}>\n                Get my {this.props.network} address from Ledger Nano S\n              </Button>\n            </p>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <Alert variant=\"danger\" hidden={!this.state.errorMessage}>\n              <p className=\"mb-0\">{this.state.errorMessage}</p>\n            </Alert>\n            <Alert variant=\"success\" hidden={!this.state.address}>\n              <p className=\"mb-0\">\n                <strong>Your IOV address:</strong>\n                <br />\n                {this.state.address}\n              </p>\n            </Alert>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n\n  private async tryLedger(): Promise<void> {\n    this.setState({ ...emptyState });\n\n    const accountIndex = 0; // leads to m/44'/234'/0'\n    let transport: TransportWebUSB | undefined;\n\n    try {\n      this.setState({ connectionOpen: true });\n      transport = await TransportWebUSB.create(1000);\n      const result = await getAddressFromLedger(transport, accountIndex);\n\n      if (result.network !== this.props.network) {\n        throw new Error(\n          `Expected '${this.props.network}' but got response for '${result.network}'. Did you open the correct app on the Ledger?`,\n        );\n      }\n\n      this.setState({\n        address: result.address,\n      });\n\n      await showAddressInLedger(transport, accountIndex);\n\n      await transport.close();\n      this.setState({ connectionOpen: false });\n    } catch (error) {\n      console.warn(error);\n      if (transport) await transport.close();\n      this.setState({\n        errorMessage: error instanceof Error ? error.message : error.toString(),\n        connectionOpen: false,\n      });\n    }\n  }\n}\n\nexport default AppLedger;\n","import React from \"react\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport { Link } from \"react-router-dom\";\n\nimport Header from \"./Header\";\nimport Jumbo from \"./Jumbo\";\n\ninterface StartProps {}\n\nclass Start extends React.Component<StartProps, {}> {\n  public render(): JSX.Element {\n    return (\n      <Container>\n        <Header />\n        <Jumbo title=\"Address Generator\" />\n        <Row>\n          <Col>\n            <h3>Generate software secret</h3>\n            <p>Your address will get a network identifier for one of the following networks.</p>\n          </Col>\n        </Row>\n        <Row>\n          <Col className=\"\"></Col>\n          <Col className=\"col-4\">\n            <Link to=\"/testnet\" className=\"btn btn-lg btn-block btn-primary\">\n              Testnet\n            </Link>\n            <p>All test networks like e.g. Lovenet</p>\n          </Col>\n          <Col className=\"\"></Col>\n          <Col className=\"col-4\">\n            <Link to=\"/mainnet\" className=\"btn btn-lg btn-block btn-primary\">\n              Mainnet\n            </Link>\n            <p>The IOV main network</p>\n          </Col>\n          <Col className=\"\"></Col>\n        </Row>\n        <Row>\n          <Col>&nbsp;</Col>\n        </Row>\n        <Row>\n          <Col>\n            <h3>Using Ledger</h3>\n            <p>Connect a Leder Nano S and continue.</p>\n          </Col>\n        </Row>\n        <Row>\n          <Col className=\"\"></Col>\n          <Col className=\"col-4\">\n            <Link to=\"/ledger-testnet\" className=\"btn btn-lg btn-block btn-primary\">\n              Testnet\n            </Link>\n            <p>All test networks like e.g. Lovenet</p>\n          </Col>\n          <Col className=\"\"></Col>\n          <Col className=\"col-4\">\n            <Link to=\"/ledger-mainnet\" className=\"btn btn-lg btn-block btn-primary\">\n              Mainnet\n            </Link>\n            <p>The IOV main network</p>\n          </Col>\n          <Col className=\"\"></Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default Start;\n","import \"bootstrap/dist/css/bootstrap.css\";\nimport \"react-bootstrap-typeahead/css/Typeahead.css\";\nimport \"./index.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Route, Switch } from \"react-router\";\nimport { HashRouter } from \"react-router-dom\";\n\nimport App from \"./App\";\nimport AppLedger from \"./AppLedger\";\nimport Start from \"./Start\";\n\nReactDOM.render(\n  <HashRouter>\n    <Switch>\n      <Route exact path=\"/mainnet\" component={() => <App network=\"mainnet\" />} />\n      <Route exact path=\"/testnet\" component={() => <App network=\"testnet\" />} />\n      <Route exact path=\"/ledger-mainnet\" component={() => <AppLedger network=\"mainnet\" />} />\n      <Route exact path=\"/ledger-testnet\" component={() => <AppLedger network=\"testnet\" />} />\n      <Route component={() => <Start />} />\n    </Switch>\n  </HashRouter>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}